apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 24
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "com.spartahack.spartahack17"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "0.1"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {

        dev {
            buildConfigField 'String', 'HOST', '"https://d.api.spartahack.com/"'
        }

        prod {
            buildConfigField 'String', 'HOST', '"https://api.spartahack.com/"'
        }
    }

}

String getJavaHome(String version) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "/usr/libexec/java_home", "-v", version
        standardOutput = stdout;
    }
    return stdout.toString().trim()
}

retrolambda {
    jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
    oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v13:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    // library for field and method binding
    compile 'com.jakewharton:butterknife:7.0.1'
    // library for image loading
    compile 'com.github.bumptech.glide:glide:3.6.1'
    // rxjava
    compile 'io.reactivex:rxjava:1.1.0'
    // need this for some small android specific stuff
    compile 'io.reactivex:rxandroid:1.1.0'
    // library for logging, allows different handeling for prod and dev
    compile 'com.jakewharton.timber:timber:4.3.1'
    // library for working with time and date objects
    compile 'net.danlew:android.joda:2.9.1'
    // library for generate and scan barcodes
    compile 'com.google.zxing:core:3.0.0'

    // library for serilizing json objects
    compile 'com.google.code.gson:gson:2.5'
    // library for easy network calls
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    // add rx integration to retrofit
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // add gson integration to retrofit
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    // add for request interceptors such as headers
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    // add logging capabilities to all network requests
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'

    // removing this stuff later most likley
    compile 'io.realm:realm-android:0.87.0'
    compile 'de.greenrobot:eventbus:2.4.0'

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"
    testCompile 'joda-time:joda-time:2.9.3'

}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}